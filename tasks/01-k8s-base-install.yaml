---
- name: Gather facts about the host
  ansible.builtin.setup:

- name: Check if /etc/sysctl.d/kubernetes.conf exists
  ansible.builtin.stat:
    path: /etc/sysctl.d/kubernetes.conf
  register: kubernetes_ctl_conf

- name: Templating out Kubernetes sysctl file
  ansible.builtin.template:
    src: kubernetes.conf.j2
    dest: /etc/sysctl.d/kubernetes.conf
    owner: root
    group: root
    mode: '0644'
  when: not kubernetes_ctl_conf.stat.exists

- name: Apply sysctl settings
  ansible.builtin.command: sysctl --system
  become: true
  when: not kubernetes_ctl_conf.stat.exists

- name: Create keyrings directory if not exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
    owner: root
    group: root
  register: keyrings_dir

- name: Check if Docker GPG key exists
  ansible.builtin.stat:
    path: /etc/apt/keyrings/docker.gpg
  register: docker_gpg_key

- name: Retrieve Docker GPG key
  ansible.builtin.get_url:
    url: "{{ docker_gpg_url }}"
    dest: /tmp/docker.key
    mode: '0644'
  when: not docker_gpg_key.stat.exists

- name: Convert Docker GPG key to keyring format
  ansible.builtin.command:
    cmd: "gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.key"
    creates: /etc/apt/keyrings/docker.gpg

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "{{ docker_repo }}"
    filename: "docker"
    state: present
    update_cache: yes

- name: Update apt cache and install containerd
  ansible.builtin.apt:
    name: "{{ ubuntu_containerd_package }}"
    update_cache: true
    state: present

- name: Template out containerd config file
  ansible.builtin.template:
    src: config.toml.j2
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: '0644'

- name: Restart containerd service
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    enabled: true

- name: Check if /etc/apt/keyrings/kubernetes-apt-keyring.gpg exists
  ansible.builtin.stat:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  register: kubernetes_gpg_key

- name: Retrieve Kubernetes GPG key
  ansible.builtin.get_url:
    url: "{{ kubernetes_gpg_url }}"
    dest: /tmp/kubernetes-apt-keyring.key
    mode: '0644'
  when:
    - kubernetes_gpg_url is defined
    - not kubernetes_gpg_key.stat.exists

- name: Convert Kubernetes GPG key to keyring format
  ansible.builtin.command:
    cmd: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-apt-keyring.key"
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  when: not kubernetes_gpg_key.stat.exists

- name: Add Kubernetes repository
  ansible.builtin.apt_repository:
    repo: "{{ kubernetes_repo }}"
    filename: "kubernetes"
    state: present
    update_cache: yes
  when: kubernetes_repo is defined

- name: Update apt cache and install Kubernetes components
  ansible.builtin.apt:
    name:
      - kubeadm={{ kubernetes_version }}
      - kubelet={{ kubernetes_version }}
      - kubectl={{ kubernetes_version }}
    update_cache: true
    state: present
  when: 
    - kubernetes_version is defined

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /etc/kubernetes
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Templating out kubeadm config file
  ansible.builtin.template:
    src: kubeadm-config.yaml.j2
    dest: /etc/kubernetes/kubeadm-config.yaml
    owner: root
    group: root
    mode: '0775'

- name: Check if kubeadm config file exists
  ansible.builtin.stat:
    path: /etc/kubernetes/kubeadm-config.yaml
  register: kubeadm_config

- name: Add kubectl configurations to .bashrc
  ansible.builtin.lineinfile:
    path: "/home/{{ kubernetes_user }}/.bashrc"
    line: "{{ item }}"
    create: no
    state: present
  loop:
    - "source <(kubectl completion bash)"
    - "alias k='/usr/bin/kubectl'"
    - "complete -o default -F __start_kubectl k"
  become: true
  become_user: "{{kubernetes_user}}"

- name: Ensure .kube directory exists for user
  ansible.builtin.file:
    path: "/home/{{ kubernetes_user }}/.kube"
    state: directory
    owner: "{{ kubernetes_user }}"
    group: "{{ kubernetes_user }}"
    mode: '0755'

