---
- name: Append IP and hostname to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ hostvars[groups['kube_masters'][0]].ansible_default_ipv4.address }} k8scp"
    state: present

- name: Wait for file '/etc/hostname-changed' to be present
  wait_for:
    path: /etc/hostname-changed
    state: present
    timeout: 300  # Adjust timeout as needed (in seconds)
    
- name: Initialize Kubernetes cluster
  ansible.builtin.command:
    cmd: kubeadm init --config=/etc/kubernetes/kubeadm-config.yaml --upload-certs --ignore-preflight-errors=all --v=5
  become: true
  register: kubeadm_init_output

- name: Save kubeadm init output to file
  ansible.builtin.copy:
    content: "{{ kubeadm_init_output.stdout }}"
    dest: /etc/kubernetes/kubeadm-init.out

- name: Ensure .kube/config file exists
  ansible.builtin.stat:
    path: "/home/{{ kubernetes_user }}/.kube/config"
  register: kube_config

- name: Copy Kubernetes admin configuration
  ansible.builtin.copy:
    remote_src: true
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ kubernetes_user }}/.kube/config"
    owner: "{{ kubernetes_user }}"
    group: "{{ kubernetes_user }}"
    mode: '0755'
  when: not kube_config.stat.exists

- name: Check if kubeadm-join.sh already exists
  delegate_to: localhost
  become: false
  ansible.builtin.stat:
    path: "{{ kubernetes_join_script }}"
  register: kubeadm_join_script

- name: Retrieve last 2 lines of kubeadm-init.out and save to local as kubernetes_join_script
  ansible.builtin.shell: "tail -n 2 /etc/kubernetes/kubeadm-init.out"
  register: kubeadm_output
  become: true  

- name: Create kubeadm-join.sh script
  ansible.builtin.copy:
    content: "{{ kubeadm_output.stdout }}"
    dest: "{{ kubernetes_join_script }}"
  delegate_to: localhost
  become: false  
  when:
    - not kubeadm_join_script.stat.exists
  vars:
    ansible_ssh_user: "{{ hostvars[groups['kube_masters'][0]].ansible_user }}"
    ansible_ssh_private_key_file: "{{ hostvars[groups['kube_masters'][0]].ansible_ssh_private_key_file }}"

- name: Append to the end of line 2 in kubeadm-join.sh
  ansible.builtin.lineinfile:
    path: "{{ kubernetes_join_script }}"
    line: "{{ lookup('file', kubernetes_join_script).splitlines()[1] }} --v=5 --ignore-preflight-errors=all"
    regexp: '^.*$'
    insertafter: '^.*$'
    backrefs: yes
  run_once: true
  delegate_to: localhost
  become: false

- name: Check if Tigera operator is already installed
  ansible.builtin.command:
    cmd: "{{ k8s_binary_location }}/kubectl --kubeconfig /home/{{ kubernetes_user }}/.kube/config get deploy tigera-operator -n tigera-operator"
  register: tigera_operator_check
  failed_when: tigera_operator_check.rc not in [0, 1]
  changed_when: false
  become: true

- name: Apply Tigera operator manifest if not already installed
  ansible.builtin.command:
    cmd: "{{ k8s_binary_location }}/kubectl --kubeconfig /home/{{ kubernetes_user }}/.kube/config create -f https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/tigera-operator.yaml"
  register: tigera_operator_result
  retries: 3
  delay: 5
  until: tigera_operator_result.rc == 0
  when: tigera_operator_check.rc == 1
  become: true

- name: Template out Calico custom-resources.yaml for 10.0.0.0 CIDR
  ansible.builtin.template:
    src: custom-resources.yaml.j2
    dest: /tmp/custom-resources.yaml

- name: Check if Calico custom resources are already installed
  ansible.builtin.command:
    cmd: "{{ k8s_binary_location }}/kubectl --kubeconfig /home/{{ kubernetes_user }}/.kube/config get bgpconfiguration default"
  register: calico_custom_resources_check
  failed_when: calico_custom_resources_check.rc not in [0, 1]
  changed_when: false
  become: true

- name: Apply Calico custom resources manifest if not already installed
  ansible.builtin.command:
    cmd: "{{ k8s_binary_location }}/kubectl --kubeconfig /home/{{ kubernetes_user }}/.kube/config create -f /tmp/custom-resources.yaml"
  register: calico_custom_resources_result
  retries: 3
  delay: 5
  until: calico_custom_resources_result.rc == 0
  when: calico_custom_resources_check.rc == 1
  become: true

- name: Wait for calico-apiserver deployment to be ready
  ansible.builtin.command: >
    {{ k8s_binary_location }}/kubectl --kubeconfig /home/{{ kubernetes_user }}/.kube/config -n calico-apiserver rollout status deployment/calico-apiserver
  retries: 10
  delay: 30
  register: calico_apiserver_result
  until: calico_apiserver_result.rc == 0

- name: Wait for calico-kube-controllers deployment to be ready
  ansible.builtin.command: >
    {{ k8s_binary_location }}/kubectl --kubeconfig /home/{{ kubernetes_user }}/.kube/config -n calico-system rollout status deployment/calico-kube-controllers
  retries: 10
  delay: 30
  register: calico_kube_controllers_result
  until: calico_kube_controllers_result.rc == 0

- name: Wait for calico-typha deployment to be ready
  ansible.builtin.command: >
    {{ k8s_binary_location }}/kubectl --kubeconfig /home/{{ kubernetes_user }}/.kube/config -n calico-system rollout status deployment/calico-typha
  retries: 10
  delay: 30
  register: calico_typha_result
  until: calico_typha_result.rc == 0

- name: Wait for coredns deployment to be ready
  ansible.builtin.command: >
    {{ k8s_binary_location }}/kubectl --kubeconfig /home/{{ kubernetes_user }}/.kube/config -n kube-system rollout status deployment/coredns
  retries: 10
  delay: 30
  register: coredns_result
  until: coredns_result.rc == 0

