---
- name: Gather facts about the host
  ansible.builtin.setup:

- name: Check if /etc/sysctl.d/kubernetes.conf exists
  ansible.builtin.stat:
    path: /etc/sysctl.d/kubernetes.conf
  register: kubernetes_ctl_conf

- name: Templating out Kubernetes sysctl file
  ansible.builtin.template:
    src: kubernetes.conf.j2
    dest: /etc/sysctl.d/kubernetes.conf
    owner: root
    group: root
    mode: '0644'
  when: not kubernetes_ctl_conf.stat.exists

- name: Apply sysctl settings
  ansible.builtin.command: sysctl --system
  become: true
  when: not kubernetes_ctl_conf.stat.exists

- name: Check if /usr/bin/containerd exists
  ansible.builtin.stat:
    path: /usr/bin/containerd
  register: containerd_exists

# - name: Download containerd tarball
#   ansible.builtin.get_url:
#     url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
#     dest: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
#   when: not containerd_exists.stat.exists

# - name: Extract containerd tarball
#   ansible.builtin.unarchive:
#     src: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
#     dest: /tmp/
#     remote_src: yes
#   when: not containerd_exists.stat.exists

# - name: Move binaries from /tmp/bin to /usr/local/bin
#   ansible.builtin.find:
#     paths: /tmp/bin
#     file_type: file
#   register: binaries_to_move
#   when: not containerd_exists.stat.exists

# - name: Move each binary to /usr/local/bin
#   ansible.builtin.command:
#     cmd: "mv {{ item.path }} {{ containerd_install_location }}/"
#   loop: "{{ binaries_to_move.files }}"
#   become: true
#   when:
#     - binaries_to_move.matched > 0
#     - not containerd_exists.stat.exists


# - name: Remove containerd tarball
#   ansible.builtin.file:
#     path: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
#     state: absent
#   when: not containerd_exists.stat.exists

# - name: Add containerd service file
#   ansible.builtin.template:
#     src: containerd-service-file.j2
#     dest: /etc/systemd/system/containerd.service
#     owner: root
#     group: root
#     mode: '0644'
#   when: not containerd_exists.stat.exists

# - name: Create containerd directory if it does not exist
#   ansible.builtin.file:
#     path: /etc/containerd
#     state: directory
#     mode: '0755'
#     owner: root
#     group: root

# - name: Template out containerd config file
#   ansible.builtin.template:
#     src: config.toml.j2
#     dest: /etc/containerd/config.toml
#     owner: root
#     group: root
#     mode: '0644'
#   when: not containerd_exists.stat.exists

# - name: Start containerd service
#   ansible.builtin.systemd:
#     name: containerd
#     state: started
#     enabled: true
#   when: not containerd_exists.stat.exists

# - name: Append IP and hostname to /etc/hosts
#   ansible.builtin.lineinfile:
#     path: /etc/hosts
#     line: "{{ ansible_host }} k8scp"
#     state: present

# - name: Check if kubectl exists
#   ansible.builtin.stat:
#     path: /usr/bin/kubectl
#   register: kubectl_binary

# - name: Check if kubelet exists
#   ansible.builtin.stat:
#     path: /usr/bin/kubelet
#   register: kubelet_binary

# - name: Check if kubeadm exists
#   ansible.builtin.stat:
#     path: /usr/bin/kubeadm
#   register: kubeadm_binary

# - name: Download kubectl binary
#   ansible.builtin.get_url:
#     url: "https://dl.k8s.io/release/{{ k8s_release_version }}/bin/linux/amd64/kubectl"
#     dest: "/tmp/kubectl"
#     mode: '0755'
#   when: not kubectl_binary.stat.exists

# - name: Download kubelet binary
#   ansible.builtin.get_url:
#     url: "https://dl.k8s.io/release/{{ k8s_release_version }}/bin/linux/amd64/kubelet"
#     dest: "/tmp/kubelet"
#     mode: '0755'
#   when: not kubelet_binary.stat.exists

# - name: Download kubeadm binary
#   ansible.builtin.get_url:
#     url: "https://dl.k8s.io/release/{{ k8s_release_version }}/bin/linux/amd64/kubeadm"
#     dest: "/tmp/kubeadm"
#     mode: '0755'
#   when: not kubeadm_binary.stat.exists

# - name: Set executable permissions for kubectl
#   ansible.builtin.file:
#     path: "/tmp/kubectl"
#     mode: '0775'
#     owner: "{{ kubernetes_user }}"
#     state: file

# - name: Set executable permissions for kubelet
#   ansible.builtin.file:
#     path: "/tmp/kubelet"
#     mode: '0775'
#     owner: "{{ kubernetes_user }}"
#     state: file

# - name: Set executable permissions for kubeadm
#   ansible.builtin.file:
#     path: "/tmp/kubeadm"
#     mode: '0775'
#     owner: "{{ kubernetes_user }}"
#     state: file

# - name: Move kubectl to k8s binary location
#   ansible.builtin.command:
#     cmd: mv /tmp/kubectl {{ k8s_binary_location }}
#   when: not kubectl_binary.stat.exists

# - name: Move kubelet to k8s binary location
#   ansible.builtin.command:
#     cmd: mv /tmp/kubelet {{ k8s_binary_location }}
#   when: not kubelet_binary.stat.exists

# - name: Move kubeadm to k8s binary location
#   ansible.builtin.command:
#     cmd: mv /tmp/kubeadm {{ k8s_binary_location }}
#   when: not kubeadm_binary.stat.exists

# - name: Add kubelet-service-file template file
#   ansible.builtin.template:
#     src: kubelet-service-file.j2
#     dest: /etc/systemd/system/kubelet.service
#     owner: root
#     group: root
#     mode: '0644'

# - name: Reload systemd to recognize new kubelet service file
#   ansible.builtin.systemd:
#     daemon_reload: yes

# - name: Enable kubelet service
#   ansible.builtin.systemd:
#     name: kubelet
#     enabled: yes

# - name: Add kubectl configurations to .bashrc
#   ansible.builtin.lineinfile:
#     path: "/home/{{ kubernetes_user }}/.bashrc"
#     line: "{{ item }}"
#     create: no
#     state: present
#   loop:
#     - "source <(kubectl completion bash)"
#     - "alias k='/usr/bin/kubectl'"
#     - "complete -o default -F __start_kubectl k"
#   become: true
#   become_user: "{{kubernetes_user}}"

# - name: Create a directory if it does not exist
#   ansible.builtin.file:
#     path: /etc/kubernetes
#     state: directory
#     mode: '0755'
#     owner: root
#     group: root

# - name: Templating out kubeadm config file
#   ansible.builtin.template:
#     src: kubeadm-config.yaml.j2
#     dest: /etc/kubernetes/kubeadm-config.yaml
#     owner: root
#     group: root
#     mode: '0775'

# # Create kubelet-config & kubelet.conf file
# - name: Check if kubelet-config.yaml exists
#   ansible.builtin.stat:
#     path: /etc/kubernetes/kubelet-config.yaml
#   register: kubelet_config

# - name: Create kubelet-config tmp file if not exist
#   ansible.builtin.command: "{{ k8s_binary_location }}/kubeadm init phase kubelet-start --config=/etc/kubernetes/kubeadm-config.yaml --dry-run"
#   become: true
#   when: not kubelet_config.stat.exists

# - name: Find the kubelet-config.yaml in /etc/kubernetes/tmp
#   ansible.builtin.find:
#     paths: /etc/kubernetes/tmp
#     patterns: "config.yaml"
#     recurse: yes
#     file_type: file
#   register: kubelet_tmp_file
#   become: true

# - name: Move kubelet config to /etc/kubernetes/kubelet-config.yaml if not exists
#   ansible.builtin.command: mv "{{ kubelet_tmp_file.files[0].path }}" /etc/kubernetes/kubelet-config.yaml
#   when:
#     - kubelet_tmp_file.matched > 0  # Ensure a file was found
#     - not kubelet_config.stat.exists  # Ensure kubelet-config.yaml does not exist
#   become: true