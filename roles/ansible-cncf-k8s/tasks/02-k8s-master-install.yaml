---
- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /etc/kubernetes
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Templating out kubeadm config file
  ansible.builtin.template:
    src: kubeadm-config.yaml.j2
    dest: /etc/kubernetes/kubeadm-config.yaml
    owner: root
    group: root
    mode: '0644'

- name: Check if kubeadm-config.yaml exists
  ansible.builtin.stat:
    path: /etc/kubernetes/kubeadm-config.yaml
  register: kubeadm_config

- name: Execute kubeadm command
  ansible.builtin.command: "{{ k8s_binary_location }}/kubeadm init --config=/etc/kubernetes/kubeadm-config.yaml --upload-certs"
  become: true
  args:
    creates: /etc/kubernetes/admin.conf
  register: kubeadm_results
  when: kubeadm_config.stat.exists

- name: Write kubeadm output to file
  ansible.builtin.copy:
    dest: /etc/kubernetes/kubeadm-output.txt
    content: "{{ kubeadm_results.stdout }}"
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Check if kubeadm-join.sh already exists
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{kubernetes_join_script}}"
  register: kubeadm_join_script

- name: Create kubeadm-join.sh
  delegate_to: localhost
  run_once: true
  ansible.builtin.copy:
    content: "{{ kubeadm_results.stdout_lines[-2:] | join('\n') }}"
    dest: "{{kubernetes_join_script}}"
    owner: alexanderkalaj
    group: staff
    mode: '0755'
  when:
    - kubeadm_results is defined
    - not kubeadm_join_script.stat.exists

- name: Setup Kube directory
  ansible.builtin.file:
    path: "/home/{{kubernetes_user}}/.kube"
    state: directory
    owner: "{{kubernetes_user}}"
    group: "{{kubernetes_user}}"
    mode: '0755'

- name: Copy admin.conf to .kube directory
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{kubernetes_user}}/.kube/config"
    owner: "{{kubernetes_user}}"
    group: "{{kubernetes_user}}"
    mode: '0644'
    remote_src: true
  become: true

- name: Check if kube config exists
  ansible.builtin.stat:
    path: "/home/{{kubernetes_user}}/.kube/config"
  register: kube_config_file

- name: Fetch kube config from master
  ansible.builtin.fetch:
    src: "/home/{{ kubernetes_user }}/.kube/config"
    dest: "{{ kubernetes_kube_config_location }}"
    flat: yes
  run_once: true
  delegate_to: "{{ hostvars[groups['kube_masters'][0]].ansible_default_ipv4.address }}"
  when: kube_config_file.stat.exists
